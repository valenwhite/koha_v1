<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .rain-grid {
    display: flex;
    margin-top: -1px;
    width: fit-content; /* Shrink to content width */
    height: fit-content;
    flex-direction: column;
    align-items: center;
    font-family: sans-serif;
    font-size: 1vw;
    line-height: 1.5vw;
  }

  .row {
    display: flex;
    height: 1.07vw;
  }

  .row.flip-v-spacing {
    margin-top: 0vw;
  }

  .char {
    display: inline-block;
    height: 0.13vw;
    font-size: 1.5vw;
    line-height: 0.15;
    vertical-align: bottom;
    opacity: 0;
    animation: fade-in 0.1s ease-out forwards;
  }

  .char.hidden {
    visibility: hidden;
    opacity: 0;
    animation: none;
  }

  .flip-h {
    display: inline-block;
    transform: scaleX(-1);
    transform-origin: center;
  }

  .flip-v {
    transform: scaleY(-1);
    transform-origin: center;
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<div class="rain-grid">
  {
    Array.from({ length: 55 }).map((_, rowIndex) => {
      const baseChars = ["K", "O", "H", "A", "H", "O", "K"];
      const flipRow = rowIndex % 2 !== 0;

      const hiddenIndices = {
        40: [0],
        41: [],
        42: [6],
        43: [1, 5],
        44: [0, 5],
        45: [1],
        46: [0, 4, 5, 6],
        47: [2, 6],
        48: [0, 1, 6],
        49: [0, 2, 5, 6],
        50: [0, 1, 5, 6],
        51: [0, 1, 3, 4, 6],
        52: [0, 1, 3, 5, 6],
        53: [0, 1, 3, 4, 5, 6],
        54: [0, 1, 2, 3, 5, 6],
      };

      // Generate random delays for characters in this row
      const delayMap = Array.from({ length: baseChars.length }, (_, i) => i);
      for (let i = delayMap.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [delayMap[i], delayMap[j]] = [delayMap[j], delayMap[i]];
      }

      return (
        <div class={`row ${flipRow ? "flip-v-spacing" : ""}`}>
          {baseChars.map((char, colIndex) => {
            const shouldFlipH = colIndex >= baseChars.length - 3;
            const flipVClass = flipRow ? "flip-v" : "";
            const hide = hiddenIndices[rowIndex]?.includes(colIndex);
            const maxRows = 74;
            const fastThreshold = 40;
            let delay;

            if (rowIndex < fastThreshold) {
              delay = rowIndex * 0.01 + delayMap[colIndex] * 0.04;
            } else {
              const slowProgress =
                (rowIndex - fastThreshold) / (maxRows - fastThreshold);
              const eased = Math.pow(slowProgress, 4); // ease-out curve
              delay =
                fastThreshold * 0.01 + eased * 2 + delayMap[colIndex] * 0.07;
            }

            return (
              <span
                class={`char ${flipVClass} ${hide ? "hidden" : ""}`}
                style={`animation-delay: ${delay}s`}
              >
                {shouldFlipH ? <span class="flip-h">{char}</span> : char}
              </span>
            );
          })}
        </div>
      );
    })
  }
</div>
